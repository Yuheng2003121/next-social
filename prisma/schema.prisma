// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  username    String   @unique
  avatar      String?
  cover       String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime @default(now())

  posts     Post[]
  likes     Like[]
  comments  Comment[]
  followers Follow[]  @relation("followerRelation")
  following Follow[]  @relation("followingRelation")

  followRequestsSent     FollowRequest[] @relation("senderRelation")
  followRequestsReceived FollowRequest[] @relation("receiverRelation")

  blockers Block[] @relation("blockerRelation")
  blocked  Block[] @relation("blockedRelation")

  stories    Story[]
}

model Post {
  id        Int      @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  likes    Like[]
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  likes Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  follower   User   @relation(name: "followerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  following   User   @relation(name: "followingRelation", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  sender   User   @relation(name: "senderRelation", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  receiver   User   @relation(name: "receiverRelation", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  blocker   User   @relation(name: "blockerRelation", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String

  blocked   User   @relation(name: "blockedRelation", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  img       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // 每个用户只能有最多只能有一个story (1对1)
  userId    String @unique

}
